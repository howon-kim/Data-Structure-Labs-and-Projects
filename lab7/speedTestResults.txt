This program inserts random Strings of length L
into different types of maps as <String, Integer> pairs.

Please enter desired length of each string: 100

Enter # strings to insert into the maps: 200
class ULLMap: 0.01 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec

Enter # strings to insert into the maps: 1000000
--Stack Overflow -- couldn't add 1000000 strings of length 100.
class BSTMap: 2.41 sec
Java's Built-in TreeMap: 2.28 sec

Enter # strings to insert into the maps: 10000
class ULLMap: 0.49 sec
class BSTMap: 0.02 sec
Java's Built-in TreeMap: 0.02 sec

Enter # strings to insert into the maps: 100000
--Stack Overflow -- couldn't add 100000 strings of length 100.
class BSTMap: 0.22 sec
Java's Built-in TreeMap: 0.25 sec


This program inserts lexicographically increasing Strings into Maps as <String, Integer> pairs.

Enter # strings to insert into the maps: 10
class ULLMap: 0.00 sec
class BSTMap: 0.00 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec

Enter # strings to insert into the maps: 100
class ULLMap: 0.01 sec
class BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec

Enter # strings to insert into the maps: 1000
class ULLMap: 0.02 sec
class BSTMap: 0.01 sec
Java's Built-in TreeMap: 0.00 sec
Java's Built-in HashMap: 0.00 sec

Enter # strings to insert into the maps: 10000
class ULLMap: 0.81 sec
class BSTMap: 0.65 sec
Java's Built-in TreeMap: 0.01 sec
Java's Built-in HashMap: 0.01 sec

Enter # strings to insert into the maps: 100000
--Stack Overflow -- couldn't add 100000 strings.
--Stack Overflow -- couldn't add 100000 strings.
Java's Built-in TreeMap: 0.09 sec
Java's Built-in HashMap: 0.04 sec
